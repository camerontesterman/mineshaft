#!/usr/bin/ruby
#
# mineshaft
#
# author:: Cameron Testerman
# email:: cameronbtesterman@gmail.com
# created:: 2017-04-14 1:19PM
#
# Copyright (c) 2017-2018 Cameron Testerman

require "mineshaft"
require "optparse"
require "yaml"
extend Mineshaft::Sugar

options = {
  openssl_dir: "/usr/local/opt/openssl",
  version: Mineshaft::Constants::RUBY_VERSION_STABLE,
  global: false
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: ms [command] [options]"
  opts.separator ""
  opts.separator "Commands"
  opts.separator "    new                              creates new environment"
  opts.separator "    install                          installs a new global Ruby"
  opts.separator "    list                             lists the ten latest versions of Ruby available to install"
  opts.separator "    reload                           reloads binaries using the current global Ruby version"
  opts.separator "    use                              selects an installed global Ruby environment to use"
  opts.separator "    env                              shows a list of all installed global Rubies, with the current one in use highlighted"
  opts.separator ""
  opts.separator "Options"

  opts.on("-v",
    "--version",
    "displays the current version of mineshaft") do
      puts "Mineshaft v#{Mineshaft::VERSION}"
      exit
  end

  opts.on("-o",
    "--with-openssl-dir DIR",
    "specify the directory where OpenSSL is installed") do |openssl_dir|
      options[:openssl_dir] = openssl_dir
  end

  opts.on("-n",
    "--no-openssl-dir",
    "do not set the OpenSSL directory - otherwise this defaults to /usr/local/opt/openssl") do |no_openssl|
      options[:no_openssl_dir] = true
  end
end

parser.parse!

case ARGV[0]
when "new"
  name = ARGV[ARGV.index("new") + 1]
  options[:version] = ARGV[2] if ARGV[2]
  create_environment(name, options)
when "list"
  list_globals
when "use"
  name = ARGV[ARGV.index("use") + 1]
  options[:global] = true
  use_environment(name, options)
when "reload"
  reload_binaries
else
  puts "Unrecognized command - #{ARGV[0]}" 
end
